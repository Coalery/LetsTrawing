{"version":3,"file":"component---src-pages-index-tsx-ee886aa09a9591dbfc86.js","mappings":"kKA2HA,UAhHA,WACE,IAAMA,GAAMC,EAAAA,EAAAA,QAAsB,MAClC,GAA0BC,EAAAA,EAAAA,UAAgB,WAAnCC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,WAAkB,GAA3CG,EAAP,KAAiBC,EAAjB,KACA,GAA8BJ,EAAAA,EAAAA,UAA0B,MAAjDK,EAAP,KAAgBC,EAAhB,KAsEA,OApEAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,KAAK,gBAAGC,EAAH,EAAGA,QAASR,EAAZ,EAAYA,MAAOS,EAAnB,EAAmBA,IAAKC,EAAxB,EAAwBA,KAAxB,OACHL,EAAW,CAAEG,QAAAA,EAASR,MAAAA,EAAOS,IAAAA,EAAKC,KAAAA,OAClCC,MAAK,WACLd,EAAIO,QAAUQ,KAAKC,MAAsB,IAAhBD,KAAKE,UAC3BC,WACAC,SAAS,EAAG,KACff,EAAS,YAEV,KAEHK,EAAAA,EAAAA,YAAU,WACM,eAAVN,IACFiB,EAAAA,EAAAA,IAAQT,EAAAA,GAAS,yBAElB,CAACR,KAEJM,EAAAA,EAAAA,YAAU,WACRY,QAAQC,IAAIjB,GACK,IAAbA,IACFD,EAAS,cACTE,GAAa,MAEd,CAACD,KAEJI,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,MAA0BA,EAAQK,IAA1BW,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAEjB,GAAc,eAAVrB,GAAsC,QAAZoB,EAAmB,CAC/C,GAAIhB,EAAQJ,MAAMsB,WAAad,EAAAA,GAAS,OAExC,GAAsC,YAAlCJ,EAAQJ,MAAM,gBAA+B,OAEjD,GAAIqB,EAAKE,OAAS,EAEhB,YADAN,EAAAA,EAAAA,IAAQT,EAAAA,GAAS,eAInB,IAAKa,EAAK,GAAGG,MAAM,UAEjB,YADAP,EAAAA,EAAAA,IAAQT,EAAAA,GAAS,mBAInB,IAAMN,EAAWuB,SAASrB,EAAQK,IAAIY,KAAK,IAE3C,OAAInB,EAAW,GAAKA,EAAW,SAC7Be,EAAAA,EAAAA,IAAQT,EAAAA,GAAS,4BAInBP,EAAS,oBACTE,EAAYD,IAKd,GAAc,QAAVF,GAA+B,QAAZoB,EAAmB,CACxC,GAAIhB,EAAQJ,MAAMsB,WAAad,EAAAA,GAAS,OACxC,GAAsC,SAAlCJ,EAAQJ,MAAM,gBAA4B,OAC9C,GAAIqB,EAAKE,OAAS,EAAG,OACrB,GAAsB,GAAlBF,EAAK,GAAGE,OAAa,OACzB,GAAIF,EAAK,KAAOxB,EAAIO,QAAS,OAE7BH,EAAS,kBAEV,CAACG,IAGFsB,EAAAA,cAAAA,OAAAA,KACEA,EAAAA,cAAAA,QAAAA,KAAAA,iBAEW,YAAV1B,EACC0B,EAAAA,cAACC,EAAAA,QAAD,CAAUC,MAAM,wBACJ,QAAV5B,EACF0B,EAAAA,cAACC,EAAAA,QAAD,CACEC,MAAM,oBACNC,UAAW,CAAC,gBACMrB,EAAAA,GADP,WACyBX,EAAIO,QAD7B,aAET,+BAGQ,eAAVJ,EACF0B,EAAAA,cAACC,EAAAA,QAAD,CACEC,MAAM,mBACNC,UAAW,CACT,0CACA,6BACA,uBACA,kCAJS,aAKIrB,EAAAA,MAIjBkB,EAAAA,cAACI,EAAAA,QAAD,CACE5B,SAAUA,EACVE,QAASA,EACT2B,SAAU,SAACC,GACT7B,GAAY,SAAC8B,GAAD,OAAOA,EAAI","sources":["webpack://lets-trawing/./src/pages/index.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { ChatData } from '../interfaces/ChatData';\n\nimport { channel, init, whisper } from '../twitch';\nimport Paint from './Paint';\nimport TextOnly from './TextOnly';\n\nimport '../styles/main.scss';\n\ntype State = 'loading' | 'otp' | 'wait-start' | 'progressing';\n\nfunction IndexPage() {\n  const otp = useRef<string | null>(null);\n  const [state, setState] = useState<State>('loading');\n  const [remained, setRemained] = useState<number>(-1);\n  const [current, setCurrent] = useState<ChatData | null>(null);\n\n  useEffect(() => {\n    init(({ channel, state, msg, self }) =>\n      setCurrent({ channel, state, msg, self })\n    ).then(() => {\n      otp.current = Math.floor(Math.random() * 1000000)\n        .toString()\n        .padStart(6, '0');\n      setState('otp');\n    });\n  }, []);\n\n  useEffect(() => {\n    if (state === 'wait-start') {\n      whisper(channel, '플레이할 라운드 수를 입력해주세요!');\n    }\n  }, [state]);\n\n  useEffect(() => {\n    console.log(remained);\n    if (remained === 0) {\n      setState('wait-start');\n      setRemained(-1);\n    }\n  }, [remained]);\n\n  useEffect(() => {\n    if (!current) return;\n    const { command, args } = current.msg;\n\n    if (state === 'wait-start' && command === '!시작') {\n      if (current.state.username !== channel) return;\n\n      if (current.state['message-type'] !== 'whisper') return;\n\n      if (args.length < 1) {\n        whisper(channel, '횟수를 입력해주세요.');\n        return;\n      }\n\n      if (!args[0].match(/[0-9]+/)) {\n        whisper(channel, '횟수는 숫자로 입력해주세요.');\n        return;\n      }\n\n      const remained = parseInt(current.msg.args[0]);\n\n      if (remained < 1 || remained > 100) {\n        whisper(channel, '1부터 100 사이의 횟수를 입력해주세요!');\n        return;\n      }\n\n      setState('progressing');\n      setRemained(remained);\n\n      return;\n    }\n\n    if (state === 'otp' && command === '!인증') {\n      if (current.state.username !== channel) return;\n      if (current.state['message-type'] !== 'chat') return;\n      if (args.length < 1) return;\n      if (args[0].length != 6) return;\n      if (args[0] !== otp.current) return;\n\n      setState('wait-start');\n    }\n  }, [current]);\n\n  return (\n    <main>\n      <title>Let's Trawing</title>\n\n      {state === 'loading' ? (\n        <TextOnly title=\"로딩중입니다. 잠시만 기다려주세요!\" />\n      ) : state === 'otp' ? (\n        <TextOnly\n          title=\"스트리머 본인임을 인증해주세요!\"\n          subtitles={[\n            `채팅창에 스트리머 본인(${channel})이 '!인증 ${otp.current}'를 입력해주세요.`,\n            '무분별한 귓속말 전송을 막기 위한 수단이에요.',\n          ]}\n        />\n      ) : state === 'wait-start' ? (\n        <TextOnly\n          title=\"게임 시작을 기다리고 있어요.\"\n          subtitles={[\n            \"스트리머 분에게 방금 '러리'라는 유저에게서 귓속말이 도착했을 거에요.\",\n            \"해당 유저에게 '!시작 [횟수]'를 보내주세요.\",\n            '예를 들면, !시작 5 같이 말이죠!',\n            '횟수는 최소 1번, 최대 100번까지 입력할 수 있어요.',\n            `인식된 스트리머: ${channel}`,\n          ]}\n        />\n      ) : (\n        <Paint\n          remained={remained}\n          current={current}\n          onAnswer={(answerUser) => {\n            setRemained((r) => r - 1);\n          }}\n        />\n      )}\n    </main>\n  );\n}\n\nexport default IndexPage;\n"],"names":["otp","useRef","useState","state","setState","remained","setRemained","current","setCurrent","useEffect","init","channel","msg","self","then","Math","floor","random","toString","padStart","whisper","console","log","command","args","username","length","match","parseInt","React","TextOnly","title","subtitles","Paint","onAnswer","answerUser","r"],"sourceRoot":""}